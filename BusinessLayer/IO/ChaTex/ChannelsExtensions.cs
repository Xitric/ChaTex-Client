// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IO.ChaTex
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Channels.
    /// </summary>
    public static partial class ChannelsExtensions
    {
            /// <summary>
            /// Create a channel in a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='channelName'>
            /// </param>
            public static void CreateChannel(this IChannels operations, int groupId, string channelName)
            {
                operations.CreateChannelAsync(groupId, channelName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a channel in a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='channelName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateChannelAsync(this IChannels operations, int groupId, string channelName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CreateChannelWithHttpMessagesAsync(groupId, channelName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete a channel from a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelId'>
            /// The id of the channel to delete
            /// </param>
            public static void DeleteChannel(this IChannels operations, int channelId)
            {
                operations.DeleteChannelAsync(channelId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a channel from a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelId'>
            /// The id of the channel to delete
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteChannelAsync(this IChannels operations, int channelId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteChannelWithHttpMessagesAsync(channelId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Change the information about a channel in a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelId'>
            /// The id of the channel to update
            /// </param>
            /// <param name='channelName'>
            /// The new name of the channel
            /// </param>
            public static void UpdateChannel(this IChannels operations, int channelId, string channelName)
            {
                operations.UpdateChannelAsync(channelId, channelName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Change the information about a channel in a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelId'>
            /// The id of the channel to update
            /// </param>
            /// <param name='channelName'>
            /// The new name of the channel
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateChannelAsync(this IChannels operations, int channelId, string channelName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateChannelWithHttpMessagesAsync(channelId, channelName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Wait for and get new messages, message deletions, message edits, channel
            /// information updates, and channel deletions in a channel
            /// </summary>
            /// <remarks>
            /// This request will not return from the service until at least one new
            /// channel event has occurred
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelId'>
            /// The id of the channel to listen to
            /// </param>
            /// <param name='since'>
            /// The time to get channel events since
            /// </param>
            public static IList<ChannelEventDTO> GetChannelEvents(this IChannels operations, int channelId, System.DateTime since)
            {
                return operations.GetChannelEventsAsync(channelId, since).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Wait for and get new messages, message deletions, message edits, channel
            /// information updates, and channel deletions in a channel
            /// </summary>
            /// <remarks>
            /// This request will not return from the service until at least one new
            /// channel event has occurred
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelId'>
            /// The id of the channel to listen to
            /// </param>
            /// <param name='since'>
            /// The time to get channel events since
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ChannelEventDTO>> GetChannelEventsAsync(this IChannels operations, int channelId, System.DateTime since, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetChannelEventsWithHttpMessagesAsync(channelId, since, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
