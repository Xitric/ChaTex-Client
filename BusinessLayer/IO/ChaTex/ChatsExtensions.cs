// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IO.ChaTex
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Chats.
    /// </summary>
    public static partial class ChatsExtensions
    {
            /// <summary>
            /// Create a new chat
            /// </summary>
            /// <remarks>
            /// Creates a new chat
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createChatDTO'>
            /// The name of the group
            /// </param>
            public static ChatDTO CreateChat(this IChats operations, CreateChatDTO createChatDTO = default(CreateChatDTO))
            {
                return operations.CreateChatAsync(createChatDTO).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new chat
            /// </summary>
            /// <remarks>
            /// Creates a new chat
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createChatDTO'>
            /// The name of the group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ChatDTO> CreateChatAsync(this IChats operations, CreateChatDTO createChatDTO = default(CreateChatDTO), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateChatWithHttpMessagesAsync(createChatDTO, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all messages in a one-to-one chat
            /// </summary>
            /// <remarks>
            /// This will get a list of messages in a chat from a specific user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chatId'>
            /// The id of the message to get
            /// </param>
            public static IList<GetMessageDTO> GetMessagesInChat(this IChats operations, int chatId)
            {
                return operations.GetMessagesInChatAsync(chatId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all messages in a one-to-one chat
            /// </summary>
            /// <remarks>
            /// This will get a list of messages in a chat from a specific user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chatId'>
            /// The id of the message to get
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GetMessageDTO>> GetMessagesInChatAsync(this IChats operations, int chatId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMessagesInChatWithHttpMessagesAsync(chatId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add users to a chat
            /// </summary>
            /// <remarks>
            /// This will add a list of users to a specific chat
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addUsersToChatDTO'>
            /// Users to be added to a chat
            /// </param>
            public static void AddUsersToChat(this IChats operations, AddUsersToChatDTO addUsersToChatDTO = default(AddUsersToChatDTO))
            {
                operations.AddUsersToChatAsync(addUsersToChatDTO).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add users to a chat
            /// </summary>
            /// <remarks>
            /// This will add a list of users to a specific chat
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addUsersToChatDTO'>
            /// Users to be added to a chat
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddUsersToChatAsync(this IChats operations, AddUsersToChatDTO addUsersToChatDTO = default(AddUsersToChatDTO), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddUsersToChatWithHttpMessagesAsync(addUsersToChatDTO, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get alle chats for the user
            /// </summary>
            /// <remarks>
            /// Gets all chats for the specific user id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The id of the user
            /// </param>
            public static IList<ChatDTO> GetAllChatsForUser(this IChats operations, int userId)
            {
                return operations.GetAllChatsForUserAsync(userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get alle chats for the user
            /// </summary>
            /// <remarks>
            /// Gets all chats for the specific user id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The id of the user
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ChatDTO>> GetAllChatsForUserAsync(this IChats operations, int userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllChatsForUserWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
