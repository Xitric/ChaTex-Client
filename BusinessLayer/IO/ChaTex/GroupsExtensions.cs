// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IO.ChaTex
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Groups.
    /// </summary>
    public static partial class GroupsExtensions
    {
            /// <summary>
            /// Create a new group
            /// </summary>
            /// <remarks>
            /// Creates a new group with the caller as the group administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createGroupDTO'>
            /// The name of the group
            /// </param>
            public static GroupDTO CreateGroup(this IGroups operations, CreateGroupDTO createGroupDTO = default(CreateGroupDTO))
            {
                return operations.CreateGroupAsync(createGroupDTO).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new group
            /// </summary>
            /// <remarks>
            /// Creates a new group with the caller as the group administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createGroupDTO'>
            /// The name of the group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GroupDTO> CreateGroupAsync(this IGroups operations, CreateGroupDTO createGroupDTO = default(CreateGroupDTO), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateGroupWithHttpMessagesAsync(createGroupDTO, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a group
            /// </summary>
            /// <remarks>
            /// Deletes the group with the specified id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            public static void DeleteGroup(this IGroups operations, int groupId)
            {
                operations.DeleteGroupAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a group
            /// </summary>
            /// <remarks>
            /// Deletes the group with the specified id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteGroupAsync(this IGroups operations, int groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteGroupWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update group name
            /// </summary>
            /// <remarks>
            /// update the group name with the specified id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='groupName'>
            /// </param>
            public static void UpdateGroup(this IGroups operations, int groupId, string groupName)
            {
                operations.UpdateGroupAsync(groupId, groupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update group name
            /// </summary>
            /// <remarks>
            /// update the group name with the specified id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='groupName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateGroupAsync(this IGroups operations, int groupId, string groupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateGroupWithHttpMessagesAsync(groupId, groupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Add users to a group
            /// </summary>
            /// <remarks>
            /// This will add a list of users to a specific group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addUsersToGroupDTO'>
            /// Users to be added to group
            /// </param>
            public static void AddUsersToGroup(this IGroups operations, AddUsersToGroupDTO addUsersToGroupDTO = default(AddUsersToGroupDTO))
            {
                operations.AddUsersToGroupAsync(addUsersToGroupDTO).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add users to a group
            /// </summary>
            /// <remarks>
            /// This will add a list of users to a specific group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addUsersToGroupDTO'>
            /// Users to be added to group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddUsersToGroupAsync(this IGroups operations, AddUsersToGroupDTO addUsersToGroupDTO = default(AddUsersToGroupDTO), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddUsersToGroupWithHttpMessagesAsync(addUsersToGroupDTO, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete a list of users from a group
            /// </summary>
            /// <remarks>
            /// This will delete a list of users from the specific group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The Id of the group
            /// </param>
            /// <param name='userIds'>
            /// The Ids of all the users
            /// </param>
            public static void DeleteUsersFromGroup(this IGroups operations, int groupId, IList<int?> userIds)
            {
                operations.DeleteUsersFromGroupAsync(groupId, userIds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a list of users from a group
            /// </summary>
            /// <remarks>
            /// This will delete a list of users from the specific group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The Id of the group
            /// </param>
            /// <param name='userIds'>
            /// The Ids of all the users
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteUsersFromGroupAsync(this IGroups operations, int groupId, IList<int?> userIds, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteUsersFromGroupWithHttpMessagesAsync(groupId, userIds, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Add access rights for roles to a group
            /// </summary>
            /// <remarks>
            /// This will add access rights for a list of roles to a specific group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addRolesToGroupDTO'>
            /// Roles to be added to group
            /// </param>
            public static void AddRolesToGroup(this IGroups operations, AddRolesToGroupDTO addRolesToGroupDTO = default(AddRolesToGroupDTO))
            {
                operations.AddRolesToGroupAsync(addRolesToGroupDTO).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add access rights for roles to a group
            /// </summary>
            /// <remarks>
            /// This will add access rights for a list of roles to a specific group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addRolesToGroupDTO'>
            /// Roles to be added to group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddRolesToGroupAsync(this IGroups operations, AddRolesToGroupDTO addRolesToGroupDTO = default(AddRolesToGroupDTO), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddRolesToGroupWithHttpMessagesAsync(addRolesToGroupDTO, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Remove access rights for roles from a group
            /// </summary>
            /// <remarks>
            /// This will remove access for a list of roles from a specific group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The Id of the group
            /// </param>
            /// <param name='roleIds'>
            /// The Ids of all the roles
            /// </param>
            public static void DeleteRolesFromGroup(this IGroups operations, int groupId, IList<int?> roleIds)
            {
                operations.DeleteRolesFromGroupAsync(groupId, roleIds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove access rights for roles from a group
            /// </summary>
            /// <remarks>
            /// This will remove access for a list of roles from a specific group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The Id of the group
            /// </param>
            /// <param name='roleIds'>
            /// The Ids of all the roles
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteRolesFromGroupAsync(this IGroups operations, int groupId, IList<int?> roleIds, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteRolesFromGroupWithHttpMessagesAsync(groupId, roleIds, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Mark or unmark a user as administrator
            /// </summary>
            /// <remarks>
            /// Give a group member administrator rights or remove administrator rights
            /// from a group administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The id of the group to affect
            /// </param>
            /// <param name='userId'>
            /// The id of the user to mark or unmark
            /// </param>
            /// <param name='isAdministrator'>
            /// true to mark the user as group administrator, false to unmark
            /// </param>
            public static void MarkUserAsAdministrator(this IGroups operations, int groupId, int userId, bool isAdministrator)
            {
                operations.MarkUserAsAdministratorAsync(groupId, userId, isAdministrator).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Mark or unmark a user as administrator
            /// </summary>
            /// <remarks>
            /// Give a group member administrator rights or remove administrator rights
            /// from a group administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The id of the group to affect
            /// </param>
            /// <param name='userId'>
            /// The id of the user to mark or unmark
            /// </param>
            /// <param name='isAdministrator'>
            /// true to mark the user as group administrator, false to unmark
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task MarkUserAsAdministratorAsync(this IGroups operations, int groupId, int userId, bool isAdministrator, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.MarkUserAsAdministratorWithHttpMessagesAsync(groupId, userId, isAdministrator, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get users for a group
            /// </summary>
            /// <remarks>
            /// Get users, taking into account members and roles on the group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            public static IList<UserDTO> GetAllGroupUsers(this IGroups operations, int groupId)
            {
                return operations.GetAllGroupUsersAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get users for a group
            /// </summary>
            /// <remarks>
            /// Get users, taking into account members and roles on the group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UserDTO>> GetAllGroupUsersAsync(this IGroups operations, int groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllGroupUsersWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get admins for a group
            /// </summary>
            /// <remarks>
            /// Get administrators for the group specified
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            public static IList<UserDTO> GetAllGroupAdmins(this IGroups operations, int groupId)
            {
                return operations.GetAllGroupAdminsAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get admins for a group
            /// </summary>
            /// <remarks>
            /// Get administrators for the group specified
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UserDTO>> GetAllGroupAdminsAsync(this IGroups operations, int groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllGroupAdminsWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
