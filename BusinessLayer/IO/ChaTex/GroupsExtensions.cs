// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IO.ChaTex
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Groups.
    /// </summary>
    public static partial class GroupsExtensions
    {
            /// <summary>
            /// Create a new group
            /// </summary>
            /// <remarks>
            /// Creates a new group with the caller as the group administrator. The caller
            /// is also initially a member of the group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createGroupDTO'>
            /// The initial settings of the group regarding group name and member rights
            /// </param>
            public static GroupDTO CreateGroup(this IGroups operations, CreateGroupDTO createGroupDTO = default(CreateGroupDTO))
            {
                return operations.CreateGroupAsync(createGroupDTO).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new group
            /// </summary>
            /// <remarks>
            /// Creates a new group with the caller as the group administrator. The caller
            /// is also initially a member of the group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createGroupDTO'>
            /// The initial settings of the group regarding group name and member rights
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GroupDTO> CreateGroupAsync(this IGroups operations, CreateGroupDTO createGroupDTO = default(CreateGroupDTO), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateGroupWithHttpMessagesAsync(createGroupDTO, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            public static void DeleteGroup(this IGroups operations, int groupId)
            {
                operations.DeleteGroupAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteGroupAsync(this IGroups operations, int groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteGroupWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Change group name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='groupName'>
            /// </param>
            public static void UpdateGroup(this IGroups operations, int groupId, string groupName)
            {
                operations.UpdateGroupAsync(groupId, groupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Change group name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='groupName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateGroupAsync(this IGroups operations, int groupId, string groupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateGroupWithHttpMessagesAsync(groupId, groupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get all the the users with direct access to a specific group.
            /// </summary>
            /// <remarks>
            /// Gets all users with direct access to the group, this will not get the users
            /// added by roles.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            public static IList<UserDTO> GetAllDirectGroupUsers(this IGroups operations, int groupId)
            {
                return operations.GetAllDirectGroupUsersAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all the the users with direct access to a specific group.
            /// </summary>
            /// <remarks>
            /// Gets all users with direct access to the group, this will not get the users
            /// added by roles.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UserDTO>> GetAllDirectGroupUsersAsync(this IGroups operations, int groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllDirectGroupUsersWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the list of users who have access to a specific group
            /// </summary>
            /// <remarks>
            /// This takes into account both what users have direct access to the group and
            /// what users have access because of their roles.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            public static IList<UserDTO> GetAllGroupUsers(this IGroups operations, int groupId)
            {
                return operations.GetAllGroupUsersAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of users who have access to a specific group
            /// </summary>
            /// <remarks>
            /// This takes into account both what users have direct access to the group and
            /// what users have access because of their roles.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UserDTO>> GetAllGroupUsersAsync(this IGroups operations, int groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllGroupUsersWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a list of users to a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='users'>
            /// The list of users to add to the group
            /// </param>
            public static void AddUsersToGroup(this IGroups operations, int groupId, IList<int?> users)
            {
                operations.AddUsersToGroupAsync(groupId, users).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a list of users to a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='users'>
            /// The list of users to add to the group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddUsersToGroupAsync(this IGroups operations, int groupId, IList<int?> users, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddUsersToGroupWithHttpMessagesAsync(groupId, users, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Remove a list of users from a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='userIds'>
            /// The Ids of all the users
            /// </param>
            public static void DeleteUsersFromGroup(this IGroups operations, int groupId, IList<int?> userIds)
            {
                operations.DeleteUsersFromGroupAsync(groupId, userIds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove a list of users from a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='userIds'>
            /// The Ids of all the users
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteUsersFromGroupAsync(this IGroups operations, int groupId, IList<int?> userIds, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteUsersFromGroupWithHttpMessagesAsync(groupId, userIds, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get the list of roles that have access to a specific group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            public static IList<RoleDTO> GetAllGroupRoles(this IGroups operations, int groupId)
            {
                return operations.GetAllGroupRolesAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of roles that have access to a specific group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RoleDTO>> GetAllGroupRolesAsync(this IGroups operations, int groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllGroupRolesWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add access rights for a list of roles to a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='roleIds'>
            /// The Ids of all the roles
            /// </param>
            public static void AddRolesToGroup(this IGroups operations, int groupId, IList<int?> roleIds)
            {
                operations.AddRolesToGroupAsync(groupId, roleIds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add access rights for a list of roles to a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='roleIds'>
            /// The Ids of all the roles
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddRolesToGroupAsync(this IGroups operations, int groupId, IList<int?> roleIds, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddRolesToGroupWithHttpMessagesAsync(groupId, roleIds, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Remove access rights for a list of roles from a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='roleIds'>
            /// The Ids of all the roles
            /// </param>
            public static void DeleteRolesFromGroup(this IGroups operations, int groupId, IList<int?> roleIds)
            {
                operations.DeleteRolesFromGroupAsync(groupId, roleIds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove access rights for a list of roles from a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='roleIds'>
            /// The Ids of all the roles
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteRolesFromGroupAsync(this IGroups operations, int groupId, IList<int?> roleIds, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteRolesFromGroupWithHttpMessagesAsync(groupId, roleIds, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Mark or unmark a user as administrator of the group
            /// </summary>
            /// <remarks>
            /// Give a group member administrator rights or remove administrator rights
            /// from a group administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The id of the group to affect
            /// </param>
            /// <param name='userId'>
            /// The id of the user to mark or unmark
            /// </param>
            /// <param name='isAdministrator'>
            /// true to mark the user as group administrator, false to unmark
            /// </param>
            public static void MarkUserAsAdministrator(this IGroups operations, int groupId, int userId, bool isAdministrator)
            {
                operations.MarkUserAsAdministratorAsync(groupId, userId, isAdministrator).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Mark or unmark a user as administrator of the group
            /// </summary>
            /// <remarks>
            /// Give a group member administrator rights or remove administrator rights
            /// from a group administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The id of the group to affect
            /// </param>
            /// <param name='userId'>
            /// The id of the user to mark or unmark
            /// </param>
            /// <param name='isAdministrator'>
            /// true to mark the user as group administrator, false to unmark
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task MarkUserAsAdministratorAsync(this IGroups operations, int groupId, int userId, bool isAdministrator, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.MarkUserAsAdministratorWithHttpMessagesAsync(groupId, userId, isAdministrator, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a list of admins for a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            public static IList<UserDTO> GetAllGroupAdmins(this IGroups operations, int groupId)
            {
                return operations.GetAllGroupAdminsAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of admins for a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UserDTO>> GetAllGroupAdminsAsync(this IGroups operations, int groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllGroupAdminsWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
