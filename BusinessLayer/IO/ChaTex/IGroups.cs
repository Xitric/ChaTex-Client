// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IO.ChaTex
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Groups operations.
    /// </summary>
    public partial interface IGroups
    {
        /// <summary>
        /// Create a new group
        /// </summary>
        /// <remarks>
        /// Creates a new group with the caller as the group administrator
        /// </remarks>
        /// <param name='createGroupDTO'>
        /// The name of the group
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<GroupDTO>> CreateGroupWithHttpMessagesAsync(CreateGroupDTO createGroupDTO = default(CreateGroupDTO), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a group
        /// </summary>
        /// <remarks>
        /// Deletes the group with the specified id
        /// </remarks>
        /// <param name='groupId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> DeleteGroupWithHttpMessagesAsync(int groupId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update group name
        /// </summary>
        /// <remarks>
        /// update the group name with the specified id
        /// </remarks>
        /// <param name='groupId'>
        /// </param>
        /// <param name='groupName'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> UpdateGroupWithHttpMessagesAsync(int groupId, string groupName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Add users to a group
        /// </summary>
        /// <remarks>
        /// This will add a list of users to a specific group
        /// </remarks>
        /// <param name='addUsersToGroupDTO'>
        /// Users to be added to group
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> AddUsersToGroupWithHttpMessagesAsync(AddUsersToGroupDTO addUsersToGroupDTO = default(AddUsersToGroupDTO), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a list of users from a group
        /// </summary>
        /// <remarks>
        /// This will delete a list of users from the specific group
        /// </remarks>
        /// <param name='groupId'>
        /// The Id of the group
        /// </param>
        /// <param name='userIds'>
        /// The Ids of all the users
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> DeleteUsersFromGroupWithHttpMessagesAsync(int groupId, IList<int?> userIds, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Add access rights for roles to a group
        /// </summary>
        /// <remarks>
        /// This will add access rights for a list of roles to a specific group
        /// </remarks>
        /// <param name='addRolesToGroupDTO'>
        /// Roles to be added to group
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> AddRolesToGroupWithHttpMessagesAsync(AddRolesToGroupDTO addRolesToGroupDTO = default(AddRolesToGroupDTO), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove access rights for roles from a group
        /// </summary>
        /// <remarks>
        /// This will remove access for a list of roles from a specific group
        /// </remarks>
        /// <param name='groupId'>
        /// The Id of the group
        /// </param>
        /// <param name='roleIds'>
        /// The Ids of all the roles
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> DeleteRolesFromGroupWithHttpMessagesAsync(int groupId, IList<int?> roleIds, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Mark or unmark a user as administrator
        /// </summary>
        /// <remarks>
        /// Give a group member administrator rights or remove administrator
        /// rights from a group administrator
        /// </remarks>
        /// <param name='groupId'>
        /// The id of the group to affect
        /// </param>
        /// <param name='userId'>
        /// The id of the user to mark or unmark
        /// </param>
        /// <param name='isAdministrator'>
        /// true to mark the user as group administrator, false to unmark
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> MarkUserAsAdministratorWithHttpMessagesAsync(int groupId, int userId, bool isAdministrator, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get users for a group
        /// </summary>
        /// <remarks>
        /// Get users, taking into account members and roles on the group
        /// </remarks>
        /// <param name='groupId'>
        /// The group id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<IList<UserDTO>>> GetAllGroupUsersWithHttpMessagesAsync(int groupId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get admins for a group
        /// </summary>
        /// <remarks>
        /// Get administrators for the group specified
        /// </remarks>
        /// <param name='groupId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<IList<UserDTO>>> GetAllGroupAdminsWithHttpMessagesAsync(int groupId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
