// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IO.ChaTex
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Messages.
    /// </summary>
    public static partial class MessagesExtensions
    {
            /// <summary>
            /// Get the messages from a specific channel
            /// </summary>
            /// <remarks>
            /// Get a number of messages from the specified channel
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelId'>
            /// The id of the channel to delete
            /// </param>
            /// <param name='fromIndex'>
            /// The index of the first message to get, beginning from the most recently
            /// posted message. This defaults to 0, meaning the most recent message
            /// </param>
            /// <param name='count'>
            /// The amount of messages to get. This defaults to 25
            /// </param>
            public static IList<GetMessageDTO> GetMessages(this IMessages operations, int channelId, int? fromIndex = default(int?), int? count = default(int?))
            {
                return operations.GetMessagesAsync(channelId, fromIndex, count).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the messages from a specific channel
            /// </summary>
            /// <remarks>
            /// Get a number of messages from the specified channel
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelId'>
            /// The id of the channel to delete
            /// </param>
            /// <param name='fromIndex'>
            /// The index of the first message to get, beginning from the most recently
            /// posted message. This defaults to 0, meaning the most recent message
            /// </param>
            /// <param name='count'>
            /// The amount of messages to get. This defaults to 25
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GetMessageDTO>> GetMessagesAsync(this IMessages operations, int channelId, int? fromIndex = default(int?), int? count = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMessagesWithHttpMessagesAsync(channelId, fromIndex, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new message
            /// </summary>
            /// <remarks>
            /// Create a new message in a specific channel
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelId'>
            /// The id of the channel to post the message to
            /// </param>
            /// <param name='messageContentDTO'>
            /// Content of the message
            /// </param>
            public static void CreateMessage(this IMessages operations, int channelId, MessageContentDTO messageContentDTO)
            {
                operations.CreateMessageAsync(channelId, messageContentDTO).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new message
            /// </summary>
            /// <remarks>
            /// Create a new message in a specific channel
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelId'>
            /// The id of the channel to post the message to
            /// </param>
            /// <param name='messageContentDTO'>
            /// Content of the message
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateMessageAsync(this IMessages operations, int channelId, MessageContentDTO messageContentDTO, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CreateMessageWithHttpMessagesAsync(channelId, messageContentDTO, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Wait for and get new messages, message deletions, and message edits in a
            /// channel
            /// </summary>
            /// <remarks>
            /// This request will not return from the service until at least one new
            /// message event has occurred
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelId'>
            /// The id of the channel to listen to
            /// </param>
            /// <param name='since'>
            /// The time to get message events since
            /// </param>
            public static IList<MessageEventDTO> GetMessageEvents(this IMessages operations, int channelId, System.DateTime since)
            {
                return operations.GetMessageEventsAsync(channelId, since).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Wait for and get new messages, message deletions, and message edits in a
            /// channel
            /// </summary>
            /// <remarks>
            /// This request will not return from the service until at least one new
            /// message event has occurred
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelId'>
            /// The id of the channel to listen to
            /// </param>
            /// <param name='since'>
            /// The time to get message events since
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<MessageEventDTO>> GetMessageEventsAsync(this IMessages operations, int channelId, System.DateTime since, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMessageEventsWithHttpMessagesAsync(channelId, since, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a message
            /// </summary>
            /// <remarks>
            /// Delete the message with the specified id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='messageId'>
            /// The id of the message to delete
            /// </param>
            public static void DeleteMessage(this IMessages operations, int messageId)
            {
                operations.DeleteMessageAsync(messageId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a message
            /// </summary>
            /// <remarks>
            /// Delete the message with the specified id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='messageId'>
            /// The id of the message to delete
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteMessageAsync(this IMessages operations, int messageId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteMessageWithHttpMessagesAsync(messageId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Edit a message
            /// </summary>
            /// <remarks>
            /// Edit the message with the specified id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='messageId'>
            /// The id of the message to delete
            /// </param>
            /// <param name='newContent'>
            /// The new content of the message
            /// </param>
            public static void EditMessage(this IMessages operations, int messageId, string newContent)
            {
                operations.EditMessageAsync(messageId, newContent).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Edit a message
            /// </summary>
            /// <remarks>
            /// Edit the message with the specified id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='messageId'>
            /// The id of the message to delete
            /// </param>
            /// <param name='newContent'>
            /// The new content of the message
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task EditMessageAsync(this IMessages operations, int messageId, string newContent, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.EditMessageWithHttpMessagesAsync(messageId, newContent, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a message
            /// </summary>
            /// <remarks>
            /// Get a message with the specified id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='messageId'>
            /// The id of the message to get
            /// </param>
            public static GetMessageDTO GetMessage(this IMessages operations, int messageId)
            {
                return operations.GetMessageAsync(messageId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a message
            /// </summary>
            /// <remarks>
            /// Get a message with the specified id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='messageId'>
            /// The id of the message to get
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetMessageDTO> GetMessageAsync(this IMessages operations, int messageId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMessageWithHttpMessagesAsync(messageId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
