// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IO.ChaTex
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Messages.
    /// </summary>
    public static partial class MessagesExtensions
    {
            /// <summary>
            /// Get some of the messages from a specific channel
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelId'>
            /// The id of the channel to get messages from
            /// </param>
            /// <param name='before'>
            /// The point in time to get messages before. Put differently, this specifies
            /// the latest possible creation time of messages to get. This defaults to the
            /// current time, meaning that the latest message will be returned
            /// </param>
            /// <param name='count'>
            /// The amount of messages to get. This defaults to 25
            /// </param>
            public static IList<GetMessageDTO> GetMessages(this IMessages operations, int channelId, System.DateTime? before = default(System.DateTime?), int? count = default(int?))
            {
                return operations.GetMessagesAsync(channelId, before, count).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get some of the messages from a specific channel
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelId'>
            /// The id of the channel to get messages from
            /// </param>
            /// <param name='before'>
            /// The point in time to get messages before. Put differently, this specifies
            /// the latest possible creation time of messages to get. This defaults to the
            /// current time, meaning that the latest message will be returned
            /// </param>
            /// <param name='count'>
            /// The amount of messages to get. This defaults to 25
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GetMessageDTO>> GetMessagesAsync(this IMessages operations, int channelId, System.DateTime? before = default(System.DateTime?), int? count = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMessagesWithHttpMessagesAsync(channelId, before, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new message in the specified channel
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelId'>
            /// The id of the channel to post the message to
            /// </param>
            /// <param name='messageContent'>
            /// The content of the message
            /// </param>
            public static void CreateMessage(this IMessages operations, int channelId, string messageContent)
            {
                operations.CreateMessageAsync(channelId, messageContent).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new message in the specified channel
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelId'>
            /// The id of the channel to post the message to
            /// </param>
            /// <param name='messageContent'>
            /// The content of the message
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateMessageAsync(this IMessages operations, int channelId, string messageContent, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CreateMessageWithHttpMessagesAsync(channelId, messageContent, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete a message
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='messageId'>
            /// The id of the message to delete
            /// </param>
            public static void DeleteMessage(this IMessages operations, int messageId)
            {
                operations.DeleteMessageAsync(messageId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a message
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='messageId'>
            /// The id of the message to delete
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteMessageAsync(this IMessages operations, int messageId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteMessageWithHttpMessagesAsync(messageId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Edit a message
            /// </summary>
            /// <remarks>
            /// Edit the message with the specified id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='messageId'>
            /// The id of the message to edit
            /// </param>
            /// <param name='newContent'>
            /// The new content of the message
            /// </param>
            public static void EditMessage(this IMessages operations, int messageId, string newContent)
            {
                operations.EditMessageAsync(messageId, newContent).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Edit a message
            /// </summary>
            /// <remarks>
            /// Edit the message with the specified id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='messageId'>
            /// The id of the message to edit
            /// </param>
            /// <param name='newContent'>
            /// The new content of the message
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task EditMessageAsync(this IMessages operations, int messageId, string newContent, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.EditMessageWithHttpMessagesAsync(messageId, newContent, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a message
            /// </summary>
            /// <remarks>
            /// Get the message with the specified id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='messageId'>
            /// The id of the message to get
            /// </param>
            public static GetMessageDTO GetMessage(this IMessages operations, int messageId)
            {
                return operations.GetMessageAsync(messageId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a message
            /// </summary>
            /// <remarks>
            /// Get the message with the specified id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='messageId'>
            /// The id of the message to get
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetMessageDTO> GetMessageAsync(this IMessages operations, int messageId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMessageWithHttpMessagesAsync(messageId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
