// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IO.ChaTex.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class MessageEventDTO
    {
        /// <summary>
        /// Initializes a new instance of the MessageEventDTO class.
        /// </summary>
        public MessageEventDTO()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MessageEventDTO class.
        /// </summary>
        /// <param name="type">The type of action that generated this event.
        /// Possible values include: 'NewMessage', 'UpdateMessage',
        /// 'DeleteMessage'</param>
        public MessageEventDTO(string type, GetMessageDTO message)
        {
            Type = type;
            Message = message;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the type of action that generated this event. Possible
        /// values include: 'NewMessage', 'UpdateMessage', 'DeleteMessage'
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Message")]
        public GetMessageDTO Message { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
            if (Message == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Message");
            }
            if (Message != null)
            {
                Message.Validate();
            }
        }
    }
}
