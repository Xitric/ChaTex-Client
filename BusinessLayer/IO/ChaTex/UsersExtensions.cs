// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IO.ChaTex
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Users.
    /// </summary>
    public static partial class UsersExtensions
    {
            /// <summary>
            /// Get all users
            /// </summary>
            /// <remarks>
            /// Get the available users in the system
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<UserDTO> GetAllUsers(this IUsers operations)
            {
                return operations.GetAllUsersAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all users
            /// </summary>
            /// <remarks>
            /// Get the available users in the system
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UserDTO>> GetAllUsersAsync(this IUsers operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllUsersWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the available groups to a user.
            /// </summary>
            /// <remarks>
            /// Get the available groups to the user with the specified ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<GroupDTO> GetGroupsForUser(this IUsers operations)
            {
                return operations.GetGroupsForUserAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the available groups to a user.
            /// </summary>
            /// <remarks>
            /// Get the available groups to the user with the specified ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GroupDTO>> GetGroupsForUserAsync(this IUsers operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupsForUserWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Login a user
            /// </summary>
            /// <remarks>
            /// Login the user with the specified e-mail
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userEmail'>
            /// The user's email
            /// </param>
            public static string Login(this IUsers operations, string userEmail)
            {
                return operations.LoginAsync(userEmail).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Login a user
            /// </summary>
            /// <remarks>
            /// Login the user with the specified e-mail
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userEmail'>
            /// The user's email
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> LoginAsync(this IUsers operations, string userEmail, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LoginWithHttpMessagesAsync(userEmail, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a user
            /// </summary>
            /// <remarks>
            /// Update an existing user in the database
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User id of user to update
            /// </param>
            /// <param name='updateUserDTO'>
            /// The name of the user
            /// </param>
            public static void UpdateUser(this IUsers operations, int userId, UpdateUserDTO updateUserDTO = default(UpdateUserDTO))
            {
                operations.UpdateUserAsync(userId, updateUserDTO).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a user
            /// </summary>
            /// <remarks>
            /// Update an existing user in the database
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User id of user to update
            /// </param>
            /// <param name='updateUserDTO'>
            /// The name of the user
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateUserAsync(this IUsers operations, int userId, UpdateUserDTO updateUserDTO = default(UpdateUserDTO), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateUserWithHttpMessagesAsync(userId, updateUserDTO, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
